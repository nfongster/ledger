// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: budgets.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createBudget = `-- name: CreateBudget :one
INSERT INTO budgets (
    target_amount, time_period, start_date, notes, category_id
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, target_amount, time_period, start_date, notes, category_id
`

type CreateBudgetParams struct {
	TargetAmount float64
	TimePeriod   Period
	StartDate    time.Time
	Notes        sql.NullString
	CategoryID   int32
}

func (q *Queries) CreateBudget(ctx context.Context, arg CreateBudgetParams) (Budget, error) {
	row := q.db.QueryRowContext(ctx, createBudget,
		arg.TargetAmount,
		arg.TimePeriod,
		arg.StartDate,
		arg.Notes,
		arg.CategoryID,
	)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.TargetAmount,
		&i.TimePeriod,
		&i.StartDate,
		&i.Notes,
		&i.CategoryID,
	)
	return i, err
}

const deleteBudget = `-- name: DeleteBudget :exec
DELETE FROM budgets
WHERE id = $1
`

func (q *Queries) DeleteBudget(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBudget, id)
	return err
}

const getAllBudgetStatuses = `-- name: GetAllBudgetStatuses :many
WITH budget_info AS (
    SELECT 
        id AS budget_id,
        category_id, 
        time_period,
        target_amount,
        start_date, 
        CAST(start_date + 
            CASE time_period
                WHEN 'weekly' THEN INTERVAL '7 DAY'
                WHEN 'monthly' THEN INTERVAL '1 MONTH'
                WHEN 'bi-monthly' THEN INTERVAL '2 MONTHS'
                WHEN 'quarterly' THEN INTERVAL '3 MONTHS'
                WHEN 'yearly' THEN INTERVAL '1 YEAR'
            END AS DATE) AS end_date 
    FROM budgets
),
transactions_sum AS (
    SELECT 
        bi.budget_id,
        bi.category_id,
        bi.time_period,
        bi.start_date,
        bi.end_date,
        bi.target_amount,
        CAST(COALESCE(SUM(t.amount), 0) AS FLOAT) AS current_spent
    FROM transactions t
    JOIN budget_info bi ON t.category_id = bi.category_id
    WHERE t.date BETWEEN bi.start_date AND bi.end_date
    GROUP BY
        bi.budget_id,
        bi.category_id,
        bi.time_period,
        bi.start_date,
        bi.end_date,
        bi.target_amount
)
SELECT
    budget_id,
    category_id,
    time_period,
    start_date,
    end_date,
    target_amount,
    current_spent
FROM transactions_sum
`

type GetAllBudgetStatusesRow struct {
	BudgetID     int32
	CategoryID   int32
	TimePeriod   Period
	StartDate    time.Time
	EndDate      time.Time
	TargetAmount float64
	CurrentSpent float64
}

func (q *Queries) GetAllBudgetStatuses(ctx context.Context) ([]GetAllBudgetStatusesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllBudgetStatuses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllBudgetStatusesRow
	for rows.Next() {
		var i GetAllBudgetStatusesRow
		if err := rows.Scan(
			&i.BudgetID,
			&i.CategoryID,
			&i.TimePeriod,
			&i.StartDate,
			&i.EndDate,
			&i.TargetAmount,
			&i.CurrentSpent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBudgetById = `-- name: GetBudgetById :one
SELECT id, target_amount, time_period, start_date, notes, category_id FROM budgets
WHERE id = $1
`

func (q *Queries) GetBudgetById(ctx context.Context, id int32) (Budget, error) {
	row := q.db.QueryRowContext(ctx, getBudgetById, id)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.TargetAmount,
		&i.TimePeriod,
		&i.StartDate,
		&i.Notes,
		&i.CategoryID,
	)
	return i, err
}

const getBudgetStatus = `-- name: GetBudgetStatus :one
WITH budget_info AS (
    SELECT 
        id AS budget_id,
        category_id, 
        time_period,
        target_amount,
        start_date, 
        CAST(start_date + 
            CASE time_period
                WHEN 'weekly' THEN INTERVAL '7 DAY'
                WHEN 'monthly' THEN INTERVAL '1 MONTH'
                WHEN 'bi-monthly' THEN INTERVAL '2 MONTHS'
                WHEN 'quarterly' THEN INTERVAL '3 MONTHS'
                WHEN 'yearly' THEN INTERVAL '1 YEAR'
            END AS DATE) AS end_date 
    FROM budgets
    WHERE budgets.id = $1
),
transactions_sum AS (
    SELECT 
        bi.budget_id,
        bi.category_id,
        bi.time_period,
        bi.start_date,
        bi.end_date,
        bi.target_amount,
        CAST(COALESCE(SUM(t.amount), 0) AS FLOAT) AS current_spent
    FROM transactions t
    JOIN budget_info bi ON t.category_id = bi.category_id
    WHERE t.date BETWEEN bi.start_date AND bi.end_date
    GROUP BY
        bi.budget_id,
        bi.category_id,
        bi.time_period,
        bi.start_date,
        bi.end_date,
        bi.target_amount
)
SELECT
    budget_id,
    category_id,
    time_period,
    start_date,
    end_date,
    target_amount,
    current_spent
FROM transactions_sum
`

type GetBudgetStatusRow struct {
	BudgetID     int32
	CategoryID   int32
	TimePeriod   Period
	StartDate    time.Time
	EndDate      time.Time
	TargetAmount float64
	CurrentSpent float64
}

func (q *Queries) GetBudgetStatus(ctx context.Context, id int32) (GetBudgetStatusRow, error) {
	row := q.db.QueryRowContext(ctx, getBudgetStatus, id)
	var i GetBudgetStatusRow
	err := row.Scan(
		&i.BudgetID,
		&i.CategoryID,
		&i.TimePeriod,
		&i.StartDate,
		&i.EndDate,
		&i.TargetAmount,
		&i.CurrentSpent,
	)
	return i, err
}

const getBudgets = `-- name: GetBudgets :many
SELECT id, target_amount, time_period, start_date, notes, category_id FROM budgets
`

func (q *Queries) GetBudgets(ctx context.Context) ([]Budget, error) {
	rows, err := q.db.QueryContext(ctx, getBudgets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Budget
	for rows.Next() {
		var i Budget
		if err := rows.Scan(
			&i.ID,
			&i.TargetAmount,
			&i.TimePeriod,
			&i.StartDate,
			&i.Notes,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBudget = `-- name: UpdateBudget :one
UPDATE budgets
SET target_amount = $2, time_period = $3, start_date = $4, notes = $5, category_id = $6
WHERE id = $1
RETURNING id, target_amount, time_period, start_date, notes, category_id
`

type UpdateBudgetParams struct {
	ID           int32
	TargetAmount float64
	TimePeriod   Period
	StartDate    time.Time
	Notes        sql.NullString
	CategoryID   int32
}

func (q *Queries) UpdateBudget(ctx context.Context, arg UpdateBudgetParams) (Budget, error) {
	row := q.db.QueryRowContext(ctx, updateBudget,
		arg.ID,
		arg.TargetAmount,
		arg.TimePeriod,
		arg.StartDate,
		arg.Notes,
		arg.CategoryID,
	)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.TargetAmount,
		&i.TimePeriod,
		&i.StartDate,
		&i.Notes,
		&i.CategoryID,
	)
	return i, err
}
