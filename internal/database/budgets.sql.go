// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: budgets.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createBudget = `-- name: CreateBudget :one
INSERT INTO budgets (
    target_amount, time_period, start_date, notes, category_id
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, target_amount, time_period, start_date, notes, category_id
`

type CreateBudgetParams struct {
	TargetAmount float64
	TimePeriod   Period
	StartDate    time.Time
	Notes        sql.NullString
	CategoryID   int32
}

func (q *Queries) CreateBudget(ctx context.Context, arg CreateBudgetParams) (Budget, error) {
	row := q.db.QueryRowContext(ctx, createBudget,
		arg.TargetAmount,
		arg.TimePeriod,
		arg.StartDate,
		arg.Notes,
		arg.CategoryID,
	)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.TargetAmount,
		&i.TimePeriod,
		&i.StartDate,
		&i.Notes,
		&i.CategoryID,
	)
	return i, err
}

const deleteBudget = `-- name: DeleteBudget :exec
DELETE FROM budgets
WHERE id = $1
`

func (q *Queries) DeleteBudget(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBudget, id)
	return err
}

const getBudgetById = `-- name: GetBudgetById :one
SELECT id, target_amount, time_period, start_date, notes, category_id FROM budgets
WHERE id = $1
`

func (q *Queries) GetBudgetById(ctx context.Context, id int32) (Budget, error) {
	row := q.db.QueryRowContext(ctx, getBudgetById, id)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.TargetAmount,
		&i.TimePeriod,
		&i.StartDate,
		&i.Notes,
		&i.CategoryID,
	)
	return i, err
}

const getBudgets = `-- name: GetBudgets :many
SELECT id, target_amount, time_period, start_date, notes, category_id FROM budgets
`

func (q *Queries) GetBudgets(ctx context.Context) ([]Budget, error) {
	rows, err := q.db.QueryContext(ctx, getBudgets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Budget
	for rows.Next() {
		var i Budget
		if err := rows.Scan(
			&i.ID,
			&i.TargetAmount,
			&i.TimePeriod,
			&i.StartDate,
			&i.Notes,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBudget = `-- name: UpdateBudget :one
UPDATE budgets
SET target_amount = $2, time_period = $3, start_date = $4, notes = $5, category_id = $6
WHERE id = $1
RETURNING id, target_amount, time_period, start_date, notes, category_id
`

type UpdateBudgetParams struct {
	ID           int32
	TargetAmount float64
	TimePeriod   Period
	StartDate    time.Time
	Notes        sql.NullString
	CategoryID   int32
}

func (q *Queries) UpdateBudget(ctx context.Context, arg UpdateBudgetParams) (Budget, error) {
	row := q.db.QueryRowContext(ctx, updateBudget,
		arg.ID,
		arg.TargetAmount,
		arg.TimePeriod,
		arg.StartDate,
		arg.Notes,
		arg.CategoryID,
	)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.TargetAmount,
		&i.TimePeriod,
		&i.StartDate,
		&i.Notes,
		&i.CategoryID,
	)
	return i, err
}
