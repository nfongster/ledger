// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: categories.sql

package database

import (
	"context"
	"time"
)

const deleteAllCategories = `-- name: DeleteAllCategories :exec
DELETE FROM categories
`

func (q *Queries) DeleteAllCategories(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllCategories)
	return err
}

const getAllCategories = `-- name: GetAllCategories :many
SELECT id, name FROM categories
`

func (q *Queries) GetAllCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
SELECT id, name FROM categories
WHERE id = $1
`

func (q *Queries) GetCategory(ctx context.Context, id int32) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, id)
	var i Category
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getOrCreateCategory = `-- name: GetOrCreateCategory :one
WITH existing_category AS (
    SELECT id FROM categories WHERE categories.name = $1
),
inserted_category AS (
    INSERT INTO categories (name)
    SELECT $1
    WHERE NOT EXISTS (SELECT 1 FROM existing_category)
    RETURNING id
)
SELECT id FROM existing_category
UNION ALL
SELECT id FROM inserted_category
`

func (q *Queries) GetOrCreateCategory(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getOrCreateCategory, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getSpendingAllTime = `-- name: GetSpendingAllTime :one
SELECT CAST(SUM(amount) AS FLOAT) FROM transactions
WHERE category_id = $1
`

func (q *Queries) GetSpendingAllTime(ctx context.Context, categoryID int32) (float64, error) {
	row := q.db.QueryRowContext(ctx, getSpendingAllTime, categoryID)
	var column_1 float64
	err := row.Scan(&column_1)
	return column_1, err
}

const getSpendingBetweenStartAndEnd = `-- name: GetSpendingBetweenStartAndEnd :one
SELECT CAST(SUM(amount) AS FLOAT) FROM transactions
WHERE category_id = $1 AND date BETWEEN $2 AND $3
`

type GetSpendingBetweenStartAndEndParams struct {
	CategoryID int32
	StartDate  time.Time
	EndDate    time.Time
}

func (q *Queries) GetSpendingBetweenStartAndEnd(ctx context.Context, arg GetSpendingBetweenStartAndEndParams) (float64, error) {
	row := q.db.QueryRowContext(ctx, getSpendingBetweenStartAndEnd, arg.CategoryID, arg.StartDate, arg.EndDate)
	var column_1 float64
	err := row.Scan(&column_1)
	return column_1, err
}

const getSpendingSinceStart = `-- name: GetSpendingSinceStart :one
SELECT CAST(SUM(amount) AS FLOAT) FROM transactions
WHERE category_id = $1 AND date >= $2
`

type GetSpendingSinceStartParams struct {
	CategoryID int32
	StartDate  time.Time
}

func (q *Queries) GetSpendingSinceStart(ctx context.Context, arg GetSpendingSinceStartParams) (float64, error) {
	row := q.db.QueryRowContext(ctx, getSpendingSinceStart, arg.CategoryID, arg.StartDate)
	var column_1 float64
	err := row.Scan(&column_1)
	return column_1, err
}

const getSpendingUntilEnd = `-- name: GetSpendingUntilEnd :one
SELECT CAST(SUM(amount) AS FLOAT) FROM transactions
WHERE category_id = $1 AND date <= $2
`

type GetSpendingUntilEndParams struct {
	CategoryID int32
	EndDate    time.Time
}

func (q *Queries) GetSpendingUntilEnd(ctx context.Context, arg GetSpendingUntilEndParams) (float64, error) {
	row := q.db.QueryRowContext(ctx, getSpendingUntilEnd, arg.CategoryID, arg.EndDate)
	var column_1 float64
	err := row.Scan(&column_1)
	return column_1, err
}

const truncateAllTables = `-- name: TruncateAllTables :exec
TRUNCATE TABLE transactions, categories RESTART IDENTITY CASCADE
`

func (q *Queries) TruncateAllTables(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, truncateAllTables)
	return err
}
