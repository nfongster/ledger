// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: categories.sql

package database

import (
	"context"
)

const deleteAllCategories = `-- name: DeleteAllCategories :exec
DELETE FROM categories
`

func (q *Queries) DeleteAllCategories(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllCategories)
	return err
}

const getAllCategories = `-- name: GetAllCategories :many
SELECT id, name FROM categories
`

func (q *Queries) GetAllCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrCreateCategory = `-- name: GetOrCreateCategory :one
WITH existing_category AS (
    SELECT id FROM categories WHERE categories.name = $1
),
inserted_category AS (
    INSERT INTO categories (name)
    SELECT $1
    WHERE NOT EXISTS (SELECT 1 FROM existing_category)
    RETURNING id
)
SELECT id FROM existing_category
UNION ALL
SELECT id FROM inserted_category
`

func (q *Queries) GetOrCreateCategory(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getOrCreateCategory, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const truncateAllTables = `-- name: TruncateAllTables :exec
TRUNCATE TABLE transactions, categories RESTART IDENTITY CASCADE
`

func (q *Queries) TruncateAllTables(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, truncateAllTables)
	return err
}
