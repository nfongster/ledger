// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: transactions.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    id, date, description, amount, category, notes
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, date, description, amount, category, notes
`

type CreateTransactionParams struct {
	ID          uuid.UUID
	Date        time.Time
	Description string
	Amount      float64
	Category    string
	Notes       sql.NullString
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.ID,
		arg.Date,
		arg.Description,
		arg.Amount,
		arg.Category,
		arg.Notes,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Description,
		&i.Amount,
		&i.Category,
		&i.Notes,
	)
	return i, err
}

const deleteAllTransactions = `-- name: DeleteAllTransactions :exec
DELETE FROM transactions
`

func (q *Queries) DeleteAllTransactions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllTransactions)
	return err
}

const getAllTransactions = `-- name: GetAllTransactions :many
SELECT id, date, description, amount, category, notes FROM transactions
`

func (q *Queries) GetAllTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getAllTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Description,
			&i.Amount,
			&i.Category,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionById = `-- name: GetTransactionById :one
SELECT id, date, description, amount, category, notes FROM transactions
WHERE id = $1
`

func (q *Queries) GetTransactionById(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionById, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Description,
		&i.Amount,
		&i.Category,
		&i.Notes,
	)
	return i, err
}

const getTransactionsByCategory = `-- name: GetTransactionsByCategory :many
SELECT id, date, description, amount, category, notes FROM transactions
WHERE category = $1
`

func (q *Queries) GetTransactionsByCategory(ctx context.Context, category string) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Description,
			&i.Amount,
			&i.Category,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
