// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: transactions.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    date, description, amount, notes, category_id
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, date, description, amount, notes, category_id
`

type CreateTransactionParams struct {
	Date        time.Time
	Description string
	Amount      float64
	Notes       sql.NullString
	CategoryID  int32
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.Date,
		arg.Description,
		arg.Amount,
		arg.Notes,
		arg.CategoryID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Description,
		&i.Amount,
		&i.Notes,
		&i.CategoryID,
	)
	return i, err
}

const deleteAllTransactions = `-- name: DeleteAllTransactions :exec
DELETE FROM transactions
`

func (q *Queries) DeleteAllTransactions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllTransactions)
	return err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions
WHERE id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, id)
	return err
}

const getAllTransactions = `-- name: GetAllTransactions :many
SELECT t.id, t.date, t.description, t.amount, t.notes, c.name AS category
FROM transactions AS t
JOIN categories AS c ON t.category_id = c.id
`

type GetAllTransactionsRow struct {
	ID          int32
	Date        time.Time
	Description string
	Amount      float64
	Notes       sql.NullString
	Category    string
}

func (q *Queries) GetAllTransactions(ctx context.Context) ([]GetAllTransactionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTransactionsRow
	for rows.Next() {
		var i GetAllTransactionsRow
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Description,
			&i.Amount,
			&i.Notes,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionById = `-- name: GetTransactionById :one
SELECT t.id, t.date, t.description, t.amount, t.notes, c.name AS category
FROM transactions AS t
JOIN categories AS c ON t.category_id = c.id
WHERE t.id = $1
`

type GetTransactionByIdRow struct {
	ID          int32
	Date        time.Time
	Description string
	Amount      float64
	Notes       sql.NullString
	Category    string
}

func (q *Queries) GetTransactionById(ctx context.Context, id int32) (GetTransactionByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getTransactionById, id)
	var i GetTransactionByIdRow
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Description,
		&i.Amount,
		&i.Notes,
		&i.Category,
	)
	return i, err
}

const getTransactionsByCategory = `-- name: GetTransactionsByCategory :many
SELECT t.id, t.date, t.description, t.amount, t.notes, c.name AS category
FROM transactions AS t
JOIN categories AS c ON t.category_id = c.id
WHERE c.name = $1
`

type GetTransactionsByCategoryRow struct {
	ID          int32
	Date        time.Time
	Description string
	Amount      float64
	Notes       sql.NullString
	Category    string
}

func (q *Queries) GetTransactionsByCategory(ctx context.Context, name string) ([]GetTransactionsByCategoryRow, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByCategory, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionsByCategoryRow
	for rows.Next() {
		var i GetTransactionsByCategoryRow
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Description,
			&i.Amount,
			&i.Notes,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transactions
SET date = $2, description = $3, amount = $4, category_id = $5, notes = $6
WHERE id = $1
RETURNING id, date, description, amount, notes, category_id
`

type UpdateTransactionParams struct {
	ID          int32
	Date        time.Time
	Description string
	Amount      float64
	CategoryID  int32
	Notes       sql.NullString
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, updateTransaction,
		arg.ID,
		arg.Date,
		arg.Description,
		arg.Amount,
		arg.CategoryID,
		arg.Notes,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Description,
		&i.Amount,
		&i.Notes,
		&i.CategoryID,
	)
	return i, err
}
